version: '3.8'

services:
  db_pg:
    image: postgres:latest
    environment:
      POSTGRES_DB: countmein
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - pg_data:/var/lib/postgresql/data

  db_mongo:
    image: mongo:latest
    environment:
      MONGO_INITDB_DATABASE: countmein
      # MONGO_INITDB_ROOT_USERNAME: mongo
      # MONGO_INITDB_ROOT_PASSWORD: mongo
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 22181:2181

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - 29092:29092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  kafdrop:
    image: obsidiandynamics/kafdrop
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: kafka:9092
    depends_on:
      - kafka

  # kafka_2_mongo_service:
  #   build:
  #     context: services

  #   depends_on:
  #     - kafka
  #     - db_mongo

  web-app:
    build:
      context: frontend
    ports:
      - 3000:3000
    volumes:
      - node_modules:/frontend/node_modules
      - ./frontend:/frontend
    restart: unless-stopped
  # api:
  #   depends_on:
  #     - db_pg
  #     - db_mongo
  #   build: 
  #     context: backend
  #   restart:
  #     unless-stopped
  #   ports:
  #     - 8000:8000
  #   environment:
  #     SPRING_APPLICATION_JSON: '{
  #       "spring.datasource.url" : "jdbc:postgresql://localhost:5432/countmein",
  #       "spring.datasource.username" : "postgres",
  #       "spring.datasource.password" : "postgres",
  #       "spring.jpa.properties.hibernate.dialect" : "org.hibernate.dialect.PostgreSQLDialect",
  #       "jwt.secret" : "3278a107eddccc12c83349a310f3a298928bb05f55a4e289acda858bbc73ad40",
  #       "jwt.expiration" : "600",
  #       "logging.level.org.springframework" : "DEBUG" }'

volumes:
  pg_data:
    driver: local
  mongo_data:
    driver: local
  node_modules:
    driver: local
